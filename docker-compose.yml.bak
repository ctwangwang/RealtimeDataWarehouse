volumes:
  postgres-db-volume: {}

x-airflow-common:
  &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.7.1}
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-kafka-python==2.0.2}
    AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL: 30
    AIRFLOW__SMTP__SMTP_HOST: 'smtp.gmail.com'
    AIRFLOW__SMTP__SMTP_MAIL_FROM: 'sample_email@my_email.com'
    AIRFLOW__SMTP__SMTP_USER: 'sample_email@my_email.com'
    AIRFLOW__SMTP__SMTP_PASSWORD: 'your_password'
    AIRFLOW__SMTP__SMTP_PORT: '587'
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    postgres:
      condition: service_healthy
  networks:
    - ctwang

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    restart: unless-stopped
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: [ "CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ctwang

  kafka_broker:
    image: docker.redpanda.com/redpandadata/redpanda:v24.1.1
    restart: unless-stopped
    command: |
      redpanda start
      --smp 1
      --overprovisioned
      --node-id 0
      --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      --advertise-kafka-addr internal://kafka_broker:9092,external://localhost:19092
      --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      --rpc-addr kafka_broker:33145
      --advertise-rpc-addr kafka_broker:33145
      --mode dev-container
      --set auto_create_topics_enabled=true
    ports:
      - 18081:18081
      - 18082:18082
      - 19092:19092
      - 19644:9644
    networks:
      - ctwang

  console:
    image: docker.redpanda.com/redpandadata/console:v2.5.2
    restart: unless-stopped
    entrypoint: /bin/sh
    command: |-
      -c 'echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yml; /app/console'
    depends_on:
      - kafka_broker
    ports:
      - 8080:8080
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: >
        kafka:
          brokers: ["kafka_broker:9092"]
          schemaRegistry:
            enabled: true
            urls: ["http://kafka_broker:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://kafka_broker:9644"]
        connect:
          enabled: true
          clusters:
            - name: local-connect-cluster
              url: http://connect:8083
    networks:
      - ctwang

  postgres:
    image: postgres:13
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "airflow" ]
      interval: 10s
      retries: 5
      start_period: 5s
    networks:
      - ctwang

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    container_name: airflow-webserver
    ports:
      - "8180:8080"
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8080/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - ctwang

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    container_name: airflow-scheduler
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8974/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - ctwang

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    container_name: airflow-init
    command:
      - -c
      - |
        function ver() {
          printf "%04d%04d%04d%04d" $${1//./ }
        }
        airflow_version=$$(AIRFLOW__LOGGING__LOGGING_LEVEL=INFO && gosu airflow airflow version)
        airflow_version_comparable=$$(ver $${airflow_version})
        min_airflow_version=2.2.0
        min_airflow_version_comparable=$$(ver $${min_airflow_version})
        if (( airflow_version_comparable < min_airflow_version_comparable )); then
          echo
          echo -e "\033[1;31mERROR!!!: Too old Airflow version $${airflow_version}!\e[0m"
          echo "The minimum Airflow version supported: $${min_airflow_version}. Only use this or higher!"
          echo
          exit 1
        fi
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources
    networks:
      - ctwang

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    container_name: airflow-cli
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    command:
      - bash
      - -c
      - airflow
    networks:
      - ctwang

  pinot-controller:
    image: apachepinot/pinot:1.2.0
    command: "StartController -zkAddress zookeeper:2181"
    container_name: pinot-controller
    restart: unless-stopped
    ports:
      - "9000:9000"
    environment:
      JAVA_OPTS: "-Dplugins.dir=/opt/pinot/plugins -Xms1G -Xmx1G -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -Xloggc:gc-pinot-controller.log"
    depends_on:
      - zookeeper
    networks:
      - ctwang

  pinot-broker:
    image: apachepinot/pinot:1.2.0
    command: "StartBroker -zkAddress zookeeper:2181"
    restart: unless-stopped
    container_name: "pinot-broker"
    ports:
      - "8099:8099"
    environment:
      JAVA_OPTS: "-Dplugins.dir=/opt/pinot/plugins -Xms1G -Xmx1G -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -Xloggc:gc-pinot-broker.log"
    depends_on:
      - pinot-controller
    networks:
      - ctwang

  pinot-server:
    image: apachepinot/pinot:1.2.0
    command: "StartServer -zkAddress zookeeper:2181"
    restart: unless-stopped
    container_name: "pinot-server"
    ports:
      - "8098:8098"
    environment:
      JAVA_OPTS: "-Dplugins.dir=/opt/pinot/plugins -Xms1G -Xmx1G -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -Xloggc:gc-pinot-server.log"
    depends_on:
      - pinot-broker
    networks:
      - ctwang

  superset:
    build:
      context: ./superset
      dockerfile: Dockerfile
    container_name: superset
    restart: unless-stopped
    environment:
      - ADMIN_USERNAME=admin
      - ADMIN_EMAIL=admin@superset.com
      - ADMIN_PASSWORD=admin
    ports:
      - '8088:8088'
    networks:
      - ctwang
networks:
  ctwang:

#這個 docker-compose.yml 文件描述了一個多服務的 Docker 環境，涉及多個服務器的配置，包括 Airflow、Zookeeper、Kafka、Postgres、Pinot、Superset 等。以下是對各個部分的詳細分析：

#1. 共享卷 (volumes) 和共享配置 (x-airflow-common)
# volumes: 定義了一個名為 postgres-db-volume 的卷，用於持久化數據庫數據。
# x-airflow-common: 定義了一個共享的 Airflow 配置塊 (&airflow-common)，用於多個 Airflow 服務共享相同的配置，如環境變量和網絡依賴。
# 2. 各個服務的配置
# Zookeeper
zookeeper: 用於管理 Kafka 中的分布式數據協調。
使用 Confluent Zookeeper Docker 映像 (confluentinc/cp-zookeeper:7.4.0)。
暴露 2181 端口，用於客戶端連接。
Kafka Broker (kafka_broker)
使用 Redpanda 作為 Kafka 的替代方案 (redpandadata/redpanda:v24.1.1)。
進行了一些配置來設置 Kafka 的廣告地址和節點 ID，暴露的端口包括 19092（Kafka）和 18081（Schema Registry）。
適合開發和容器環境 (--mode dev-container)。
Kafka Console (console)
用於管理 Kafka 的 UI 控制台。
配置中提到 Kafka 的 brokers 和 Schema Registry 地址以供監控和管理。
PostgreSQL (postgres)
使用 PostgreSQL 13 作為 Airflow 的後端數據庫。
定義了數據庫名稱 (airflow)、用戶名和密碼。
使用 postgres-db-volume 來保持數據庫的持久性。
3. Apache Airflow
多個 Airflow 服務，共享了相同的基礎配置。
airflow-webserver：運行 Airflow 的 Web UI，並暴露在端口 8180 上。
airflow-scheduler：負責運行定義的 DAG 任務。
airflow-init：初始化腳本，用於檢查 Airflow 版本、資源可用性等。
4. Pinot（數據庫查詢和分析）
包含三個 Pinot 服務：
pinot-controller：負責管理和控制 Pinot 集群。
pinot-broker 和 pinot-server：用於處理查詢請求和服務數據。
所有 Pinot 服務都依賴 Zookeeper 來協調集群信息。
5. Superset
superset 是一個數據可視化工具，通常用於展示和分析數據。
使用 Dockerfile 構建 Superset，暴露 8088 端口。
6. 網絡 (networks)
定義了一個共享的名為 ctwang 的網絡，使得所有的服務可以通過內部網絡進行通信。
小結
這個 docker-compose.yml 文件配置了一個完整的數據工程工作流，包括以下功能：

數據協調（通過 Zookeeper 和 Kafka）。
數據存儲和計算（通過 Postgres 和 Airflow）。
數據查詢（通過 Pinot）。
數據可視化（通過 Superset）。